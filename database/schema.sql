-- First, drop existing tables if they exist
DROP TABLE IF EXISTS assignments CASCADE;
DROP TABLE IF EXISTS orders CASCADE;
DROP TABLE IF EXISTS delivery_partners CASCADE;

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Delivery Partners Table
CREATE TABLE delivery_partners (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    phone VARCHAR(20) NOT NULL,
    area VARCHAR(255) NOT NULL,
    status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'inactive')),
    rating DECIMAL(3,2) DEFAULT 0.00,
    success_rate DECIMAL(5,2) DEFAULT 0.00,
    total_deliveries INTEGER DEFAULT 0,
    successful_deliveries INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW())
);

-- Orders Table
CREATE TABLE orders (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_number VARCHAR(50) UNIQUE NOT NULL,
    customer_name VARCHAR(255) NOT NULL,
    customer_email VARCHAR(255),
    contact_number VARCHAR(20) NOT NULL,
    delivery_address TEXT NOT NULL,
    area VARCHAR(255) NOT NULL,
    status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'assigned', 'in_progress', 'completed', 'cancelled')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW())
);

-- Assignments Table (Links Orders with Delivery Partners)
CREATE TABLE assignments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id BIGINT REFERENCES orders(id) ON DELETE CASCADE,
    partner_id BIGINT REFERENCES delivery_partners(id) ON DELETE SET NULL,
    status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'accepted', 'picked_up', 'delivered', 'failed')),
    assigned_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()),
    completed_at TIMESTAMP WITH TIME ZONE,
    notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()),
    UNIQUE(order_id, partner_id)
);

-- Trigger to update updated_at column
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = TIMEZONE('utc'::text, NOW());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for all tables
DROP TRIGGER IF EXISTS update_delivery_partners_updated_at ON delivery_partners;
CREATE TRIGGER update_delivery_partners_updated_at
    BEFORE UPDATE ON delivery_partners
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS update_orders_updated_at ON orders;
CREATE TRIGGER update_orders_updated_at
    BEFORE UPDATE ON orders
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS update_assignments_updated_at ON assignments;
CREATE TRIGGER update_assignments_updated_at
    BEFORE UPDATE ON assignments
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Create a trigger function to update delivery partner statistics
CREATE OR REPLACE FUNCTION update_delivery_partner_stats()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.status = 'delivered' AND OLD.status != 'delivered' THEN
        -- Update delivery partner statistics
        UPDATE delivery_partners
        SET total_deliveries = total_deliveries + 1,
            successful_deliveries = successful_deliveries + 1,
            success_rate = CASE 
                WHEN (total_deliveries + 1) > 0 
                THEN ((successful_deliveries + 1)::DECIMAL / (total_deliveries + 1)) * 100
                ELSE 0
            END
        WHERE id = NEW.partner_id;
    ELSIF NEW.status = 'failed' AND OLD.status != 'failed' THEN
        -- Update only total deliveries for failed deliveries
        UPDATE delivery_partners
        SET total_deliveries = total_deliveries + 1,
            success_rate = CASE 
                WHEN (total_deliveries + 1) > 0 
                THEN (successful_deliveries::DECIMAL / (total_deliveries + 1)) * 100
                ELSE 0
            END
        WHERE id = NEW.partner_id;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger for updating delivery partner stats
DROP TRIGGER IF EXISTS update_partner_stats_on_assignment ON assignments;
CREATE TRIGGER update_partner_stats_on_assignment
    AFTER UPDATE ON assignments
    FOR EACH ROW
    EXECUTE FUNCTION update_delivery_partner_stats();

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_delivery_partners_status ON delivery_partners(status);
CREATE INDEX IF NOT EXISTS idx_orders_status ON orders(status);
CREATE INDEX IF NOT EXISTS idx_assignments_status ON assignments(status);
CREATE INDEX IF NOT EXISTS idx_orders_area ON orders(area);
CREATE INDEX IF NOT EXISTS idx_delivery_partners_area ON delivery_partners(area);

-- Sample data for testing
INSERT INTO delivery_partners (name, email, phone, area, status, rating, success_rate, total_deliveries, successful_deliveries)
VALUES 
    ('John Doe', 'john@example.com', '+1234567890', 'North Zone', 'active', 4.5, 85.5, 100, 85),
    ('Jane Smith', 'jane@example.com', '+1234567891', 'South Zone', 'active', 4.8, 92.3, 150, 138),
    ('Mike Johnson', 'mike@example.com', '+1234567892', 'East Zone', 'active', 4.2, 78.9, 90, 71);

-- Sample orders
INSERT INTO orders (order_number, customer_name, contact_number, delivery_address, area, status)
VALUES 
    ('ORD001', 'Alice Brown', '+1987654320', '123 Main St, North Zone', 'North Zone', 'pending'),
    ('ORD002', 'Bob Wilson', '+1987654321', '456 Oak St, South Zone', 'South Zone', 'assigned'),
    ('ORD003', 'Carol Davis', '+1987654322', '789 Pine St, East Zone', 'East Zone', 'completed');

-- Sample assignments
INSERT INTO assignments (order_id, partner_id, status)
SELECT o.id, dp.id, 
    CASE 
        WHEN o.status = 'pending' THEN 'pending'
        WHEN o.status = 'assigned' THEN 'accepted'
        WHEN o.status = 'completed' THEN 'delivered'
    END
FROM orders o
JOIN delivery_partners dp ON dp.area = o.area
WHERE o.status IN ('pending', 'assigned', 'completed');
